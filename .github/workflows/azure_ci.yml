name: CI
on:
  # Only trigger this workflow for the 5.x branch
  push:
    branches:
      - 5.x
    tags:
      - v*
  pull_request:
    branches:
      - 5.x
jobs:
  CI:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.libvips-version == 'master' }}
    strategy:
      fail-fast: true
      matrix:
        include:
          # TODO(kleisauke): Enable once magickload_source is supported
          # - os: ubuntu-22.04
          #   libvips-version: master
          - os: ubuntu-22.04
            libvips-version: 8.14.1
            coverage: true
    steps:
      - uses: actions/checkout@v3
      - name: Cache libvips
        if: matrix.libvips-version != 'master'
        id: cache-libvips
        uses: actions/cache@v3
        with:
          path: ~/vips
          key: ${{ matrix.libvips-version }}
      - name: Install dependencies
        run: |
          # for Test::Nginx
          curl -fsSL https://openresty.org/package/pubkey.gpg | sudo gpg --dearmor -o /usr/share/keyrings/openresty.gpg
          echo "deb [signed-by=/usr/share/keyrings/openresty.gpg] https://openresty.org/package/ubuntu $(lsb_release -sc) main" | \
            sudo tee /etc/apt/sources.list.d/openresty.list > /dev/null
          # install dependencies
          sudo apt-get update
          sudo apt-get install \
            meson \
            libcgif-dev libexif-dev libexpat1-dev \
            libheif-dev libimagequant-dev liblcms2-dev \
            libmagickcore-dev liborc-0.4-dev libpango1.0-dev \
            libpng-dev libpoppler-glib-dev librsvg2-dev \
            libtiff5-dev libwebp-dev \
            libtest-nginx-perl
      - name: Install libvips
        if: steps.cache-libvips.outputs.cache-hit != 'true'
        env:
          VIPS_VERSION: ${{ matrix.libvips-version }}
          VIPS_PRE_VERSION: ${{ matrix.libvips-pre-version }}
        run: .ci/install-vips.sh -Ddeprecated=false -Dintrospection=false
      - name: Prepare environment
        run: |
          echo "$HOME/vips/bin" >> $GITHUB_PATH
          echo "$HOME/nginx/sbin" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=$HOME/vips/lib" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$HOME/vips/lib/pkgconfig" >> $GITHUB_ENV
          mkdir -p build
      - name: Build
        working-directory: build
        run: |
          cmake .. \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCUSTOM_NGX_FLAGS="--prefix=$HOME/nginx" \
            -DENABLE_COVERAGE=$([ "${{ matrix.coverage }}" = true ] && echo "ON" || echo "OFF") \
            -DBUILD_TESTS=ON
          cmake --build . -- -j$(nproc)
      - name: Run unit tests
        env:
          VIPS_WARNING: 0
        working-directory: build
        run: ctest -j $(nproc) --output-on-failure
      - name: Run integration tests
        env:
          TEST_NGINX_SERVROOT: ${{ github.workspace }}/servroot
        run: prove -r test/nginx
      - name: Upload coverage to Codecov
        if: matrix.coverage
        uses: codecov/codecov-action@v3
        with:
          gcov: true
          gcov_ignore: test/api
  docker-publish:
    needs: CI
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: 'Build and push image'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker build -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/imageservice:${{ github.sha }} -f docker/Dockerfile .
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/imageservice:${{ github.sha }}

      - name: 'Deploy to Azure Container Instances'
        uses: 'azure/aci-deploy@v1'
        with:
          resource-group: ${{ secrets.RESOURCE_GROUP }}
          dns-name-label: ${{ secrets.RESOURCE_GROUP }}${{ github.run_number }}
          image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/imageservice:${{ github.sha }}
          registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          registry-username: ${{ secrets.REGISTRY_USERNAME }}
          registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          name: aci-imageserver
          location: 'west us'
